"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[524],{7090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"chapter-02/suitefile_syntax","title":"2.2 Basic Suite File Syntax","description":"\x3c!--","source":"@site/docs/chapter-02/02_suitefile_syntax.md","sourceDirName":"chapter-02","slug":"/chapter-02/suitefile_syntax","permalink":"/robotframework-RFCP-syllabus/docs/chapter-02/suitefile_syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/robotframework/robotframework-RFCP-syllabus/edit/docusaurus/website/docs/chapter-02/02_suitefile_syntax.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"2.1 Suite File & Tree Structure","permalink":"/robotframework-RFCP-syllabus/docs/chapter-02/suitefile"},"next":{"title":"2.3 Executing Robot","permalink":"/robotframework-RFCP-syllabus/docs/chapter-02/executing"}}');var a=t(4848),i=t(8453);const r={},o="2.2 Basic Suite File Syntax",l={},d=[{value:"2.2.1 Separation and Indentation",id:"221-separation-and-indentation",level:2},{value:"2.2.2 Line Breaks, Continuation and Empty Lines",id:"222-line-breaks-continuation-and-empty-lines",level:2},{value:"2.2.3 In-line Comments",id:"223-in-line-comments",level:2},{value:"2.2.4 Escaping of Control Characters",id:"224-escaping-of-control-characters",level:2},{value:"2.2.5 Example Suite File",id:"225-example-suite-file",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"22-basic-suite-file-syntax",children:"2.2 Basic Suite File Syntax"})}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2",type:"K2",children:(0,a.jsx)(n.p,{children:"Understand the basic syntax of test cases and tasks."})})}),"\n",(0,a.jsx)(n.h2,{id:"221-separation-and-indentation",children:"2.2.1 Separation and Indentation"}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2.1",type:"K3",children:(0,a.jsx)(n.p,{children:"Understand and apply the mechanics of indentation and separation in Robot Framework."})})}),"\n",(0,a.jsx)(n.p,{children:"As mentioned before, Robot Framework uses an indentation-based and space-separated syntax to structure keywords, test cases, and tasks."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Two or more spaces"})," are used to separate or indent statements in Robot Framework files, while a single space is a valid character in tokens (i.e. keyword names, argument values, variables, etc.).\nThe clear recommendation for separators is to use ",(0,a.jsx)(n.strong,{children:"four spaces"})," or more to unambiguously make it visible\nto a potential reader where elements are separated or indented."]}),"\n",(0,a.jsx)(n.p,{children:"A statement in Robot Framework is a logical line that contains specific data tokens which are separated by multiple spaces (separator token) from each other."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example 1"}),": A keyword call is a statement that consists of a keyword name and its arguments, which are separated by two or more spaces from the keyword name and from each other.\nAn optional assignment of the return value can be possible as well.\nThe line comments starting with a hash ",(0,a.jsx)(n.code,{children:"#"})," show the tokens in the statement."]}),"\n",(0,a.jsx)(n.p,{children:"Example with tokens in comments:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-robotframework",children:"*** Test Cases ***\n# TESTCASE HEADER |\nTest Case Name\n# TESTCASE   | EOL\n      Keyword Call     argument one     argument two\n# SEP |  KEYWORD | SEP | ARGUMENT | SEP | ARGUMENT | EOL\n      Keyword Call\n# SEP |  KEYWORD | EOL\n      ...            argument one\n# SEP | CONTINUATION | ARGUMENT | EOL\n      ...            argument two\n# SEP | CONTINUATION | ARGUMENT | EOL\n      ${variable_assignment}     Keyword Getter Call\n# SEP |     ASSIGNMENT     | SEP |     KEYWORD     | EOL\n"})}),"\n",(0,a.jsx)(n.p,{children:"Plain example for better readability:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-robotframework",children:"*** Test Cases ***\nTest Case Name\n      Keyword Call     argument one     argument two\n      Keyword Call\n      ...            argument one\n      ...            argument two\n      ${variable_assignment}     Keyword Getter Call\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the example above, the test case ",(0,a.jsx)(n.code,{children:"Test Case Name"})," contains three keyword calls.\nThe first keyword call ",(0,a.jsx)(n.code,{children:"Keyword Call"})," has two arguments, ",(0,a.jsx)(n.code,{children:"argument one"})," and ",(0,a.jsx)(n.code,{children:"argument two"}),".\nThe second keyword call even though it is split over two lines is considered one logical line and identical to the first keyword call.\nThe third keyword call is a keyword call that assigns the return value of the keyword ",(0,a.jsx)(n.code,{children:"Keyword Getter Call"})," to the variable ",(0,a.jsx)(n.code,{children:"${variable_assignment}"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example 2"}),": In the ",(0,a.jsx)(n.code,{children:"*** Settings ***"})," section, the settings are separated from their values by four or more spaces."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-robotframework",children:"*** Settings ***\n# SETTINGS HDR |\nDocumentation     This is the first line of documentation.\n#  SETTING  | SEP |                 VALUE                | EOL\n...   # just CONTINUATION and End Of Line\n...            This is the second line of documentation.\n# CONTINUATION |                VALUE                  | EOL\nResource     keywords.resource\n# SET  | SEP |     VALUE     | EOL\n"})}),"\n",(0,a.jsxs)(n.p,{children:["All elements themselves in their section are written without any indentation.\nSo settings in the ",(0,a.jsx)(n.code,{children:"*** Settings ***"})," section, test cases in the ",(0,a.jsx)(n.code,{children:"*** Test Cases ***"})," section,\nand keywords in the ",(0,a.jsx)(n.code,{children:"*** Keywords ***"})," section are written without any indentation.\nHowever, when defining tests|tasks and keywords, indentation is used to define their body, while their name is still un-indented.\nSo after i.e. a test case name, all subsequent lines that are part of the test case body are indented by two or more spaces."]}),"\n",(0,a.jsx)(n.p,{children:"That means that a body statement always starts with a separator token, followed by a data token, like i.e. variable or keyword as seen in the examples above."}),"\n",(0,a.jsxs)(n.p,{children:["The body ends when either a new un-indented test case name is defined\nor another section like ",(0,a.jsx)(n.code,{children:"*** Keywords ***"})," starts\nor the end of the file is reached."]}),"\n",(0,a.jsx)(n.p,{children:"Within the body of tests|tasks and keywords, control structures like loops or conditions can be used. Their content should be indented by additional four spaces to make it clear that they are part of the control structure. However, this is not mandatory and only a recommendation to make the file more readable."}),"\n",(0,a.jsxs)(n.p,{children:["While single tabulators (",(0,a.jsx)(n.code,{children:"\\t"}),") as well as two or more spaces are valid separators,\nit is recommended to use multiple spaces for indentation and separation and avoid tabulators.\nThis can prevent issues where different editors align text to a grid (e.g., 4 spaces) when using tabs,\nmaking it difficult for users to distinguish between tabs and spaces.\nIt could cause a single tabulator to look the same as a single space in the editor,\nwhich would lead to misinterpretation of the file structure by a human reader."]}),"\n",(0,a.jsx)(n.h2,{id:"222-line-breaks-continuation-and-empty-lines",children:"2.2.2 Line Breaks, Continuation and Empty Lines"}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2.2",type:"K3",children:(0,a.jsx)(n.p,{children:"Be able to use line breaks and continuation in a statement."})})}),"\n",(0,a.jsx)(n.p,{children:"Empty lines are allowed and encouraged to structure data files and make them more readable.\nIn the next example, the sections are visibly separated by two empty lines, and the tests are separated by one empty line.\nEmpty lines are technically not relevant and are ignored while parsing the file."}),"\n",(0,a.jsxs)(n.p,{children:["By default, each statement in a suite or resource file is terminated by a line break, so that in each literal line only one statement is possible.\nHowever, for better readability or in the case of documentation for adding line breaks, expressions can expand over multiple literal lines if they are continued with ",(0,a.jsx)(n.code,{children:"..."})," (three dots) and a separator (multiple spaces) at the beginning of the next line, potentially being indented. See the suite documentation as an example."]}),"\n",(0,a.jsx)(n.p,{children:"With this line continuation between two data tokens, the two literal lines are interpreted as one logical line and do result in one statement."}),"\n",(0,a.jsx)(n.p,{children:"A line continuation can only be performed where a separator is expected, like between a keyword name and its arguments or between two arguments or between a setting and its value(s).\nIn the following example the two keyword calls are logically identical, even though the second one is split over three literal lines."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,a.jsx)(n.h2,{id:"223-in-line-comments",children:"2.2.3 In-line Comments"}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2.3",type:"K3",children:(0,a.jsx)(n.p,{children:"Be able to add in-line comments to suites."})})}),"\n",(0,a.jsxs)(n.p,{children:["In Robot Framework comments can be added to lines after the content\nby starting the comment with a separator (multiple spaces) and a hash ",(0,a.jsx)(n.code,{children:"#"}),".\nThe hash ",(0,a.jsx)(n.code,{children:"#"})," is used to indicate that the rest of the line is a comment and is ignored by Robot Framework.\nSame works at the very start of a line, which makes the whole line a comment."]}),"\n",(0,a.jsx)(n.p,{children:"Hashes in the middle of a value are considered normal characters and do not need to be escaped."}),"\n",(0,a.jsxs)(n.p,{children:["If an argument value or any other thing shall start with a hash (",(0,a.jsx)(n.code,{children:"#"}),")\nand it is preceded by a separator (multiple spaces),\nthe hash must be escaped by a backslash ",(0,a.jsx)(n.code,{children:"\\"})," like ",(0,a.jsx)(n.code,{children:"Click Element By Css    \\#element_id"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Block comments are not supported in Robot Framework,\nso each line that shall be a comment must be prefixed with a hash ",(0,a.jsx)(n.code,{children:"#"}),".\nAlternatively the ",(0,a.jsx)(n.code,{children:"*** Comments ***"})," section can be used to add multi-line comments to files."]}),"\n",(0,a.jsx)(n.h2,{id:"224-escaping-of-control-characters",children:"2.2.4 Escaping of Control Characters"}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2.4",type:"K2",children:(0,a.jsx)(n.p,{children:"Understand how to escape control characters in Robot Framework."})})}),"\n",(0,a.jsx)(n.p,{children:"In Robot Framework strings are not quoted which leads to situations where users need to be able to define,\nif a specific character shall be interpreted as part of the value or as a control character."}),"\n",(0,a.jsx)(n.p,{children:"Some examples are:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["the ",(0,a.jsx)(n.code,{children:"#"})," hash character that is used to start a comment as described above."]}),"\n",(0,a.jsxs)(n.li,{children:["variables that are started by i.e. ",(0,a.jsx)(n.code,{children:"${"})," (See ",(0,a.jsx)(n.a,{href:"/robotframework-RFCP-syllabus/docs/chapter-03/variables",children:"3.2 Variables"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"multiple spaces that are considered as separators"}),"\n",(0,a.jsxs)(n.li,{children:["equal sign ",(0,a.jsx)(n.code,{children:"="})," that is used to assign named arguments to keywords"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["All those characters or character sequences that are interpreted as control characters can be escaped by a backslash ",(0,a.jsx)(n.code,{children:"\\"}),".\nThis means that the character following the backslash is interpreted as a normal character and not as a control character."]}),"\n",(0,a.jsxs)(n.p,{children:["This leads to the fact that a backslash itself must be escaped by another backslash to be interpreted as a normal  backslash character. Therefore it is strongly recommended to use forward slashes ",(0,a.jsx)(n.code,{children:"/"})," as path separators in paths also on windows environments and avoid backslashes ",(0,a.jsx)(n.code,{children:"\\"})," when ever possible."]}),"\n",(0,a.jsxs)(n.p,{children:["Leading and trailing spaces in values are normally considered being part of the separator surrounding the values.\nIf values shall contain leading or trailing spaces they must be either enclosed in backslashes ",(0,a.jsx)(n.code,{children:"\\"})," or replaced by the special variable ",(0,a.jsx)(n.code,{children:"${SPACE}"})," that contains a single space character."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-robotframework",children:'*** Test Cases ***\nTest of Escaping\n    Log    \\# leading hash.                     # This logs "# leading hash."\n    Log    \\ lead & trail \\                     # This logs " lead & trail "\n    Log    ${SPACE}and now 5 More: \\ \\ \\ \\ \\    # This logs " and now 5 More:     "\n    Log    Not a \\${variable}                   # This logs "Not a ${variable}"\n    Log    C:\\\\better\\\\use\\\\forward\\\\slashes    # This logs "C:\\better\\use\\forward\\slashes"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"225-example-suite-file",children:"2.2.5 Example Suite File"}),"\n",(0,a.jsx)(n.admonition,{title:"Learning Objectives",type:"lo",children:(0,a.jsx)(n.admonition,{title:"LO-2.2.5",type:"K2",children:(0,a.jsx)(n.p,{children:"Understand the structure of a basic suite file."})})}),"\n",(0,a.jsx)(n.p,{children:"In the following example, two test cases are defined in a suite file."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Login User With Password"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:"Denied Login With Wrong Password"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Both test the login functionality of a system by calling four keywords in their bodies."}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.code,{children:"*** Settings ***"})," section, the suite is documented, and the keywords for connecting to the server, logging in, and verifying the login are imported from a resource file.\nThe settings of this section are not indented, but their values are separated by four or more spaces."]}),"\n",(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.code,{children:"*** Test Cases ***"})," section, there are two test cases defined.\nThe first test case, ",(0,a.jsx)(n.code,{children:"Login User With Password"}),", connects to the server, logs in with the username ",(0,a.jsx)(n.code,{children:"ironman"})," and the password ",(0,a.jsx)(n.code,{children:"1234567890"}),", and verifies that the login was successful with the user's name ",(0,a.jsx)(n.code,{children:"Tony Stark"}),".\nIn this test, the first called keyword is ",(0,a.jsx)(n.code,{children:"Connect To Server"})," without any arguments, while the second called keyword is ",(0,a.jsx)(n.code,{children:"Login User"}),", and it has two argument values: ",(0,a.jsx)(n.code,{children:"ironman"})," and ",(0,a.jsx)(n.code,{children:"1234567890"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The second test case, ",(0,a.jsx)(n.code,{children:"Denied Login With Wrong Password"}),", connects to the server, tries to log in with the username ",(0,a.jsx)(n.code,{children:"ironman"})," and the password ",(0,a.jsx)(n.code,{children:"123"}),", and expects an error to be raised and the login to be denied."]}),"\n",(0,a.jsx)(n.p,{children:"Clearly visible due to the indentation by four spaces, the body of the test cases contains the keywords that are called to execute the test case.\nIn the test case body, some keyword calls have arguments that are separated by two or more spaces from the keyword name."}),"\n",(0,a.jsxs)(n.p,{children:["The following tests will be executed in the order they are defined in the suite file. First, the ",(0,a.jsx)(n.code,{children:"Login User With Password"})," test case will be executed, followed by the ",(0,a.jsx)(n.code,{children:"Denied Login With Wrong Password"})," test case."]}),"\n",(0,a.jsxs)(n.p,{children:["Example Suite File Content ",(0,a.jsx)(n.code,{children:"robot_files/TestSuite.robot"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-robotframework",children:"*** Settings ***\nDocumentation     A suite for valid and invalid login tests.\n...\n...               Keywords are imported from the resource file.\nResource          keywords.resource\n\n\n*** Test Cases ***\nLogin User With Password\n    Connect To Server\n    Login User            ironman    1234567890   # Login with valid credentials\n    Verify Valid Login    Tony Stark   # Verify that the login was successful by checking the user name\n    Close Server Connection\n\nDenied Login With Wrong Password\n    Connect To Server\n    Run Keyword And Expect Error    # this keyword calls another keyword and expects an error\n    ...        *Invalid Password*   # it expects an error containing `Invalid Password`\n    ...        Login User           # this keyword is called with two arguments\n    ...        ironman\n    ...        123#wrong            # A hash in the middle of a string is not a comment\n    Verify Unauthorized Access\n    Close Server Connection\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);