LO ID,K Level,Content,Slide Number,Done,Notes
LO-1.1,(K1),Recall the two main use cases of Robot Framework,,,
LO-1.1.1,(K1),recall the test levels Robot Framework is mostly used for,,,
LO-1.2.1,(K1),Recall the layers of the Generic Test Automation Architecture (gTAA) and their corresponding components in Robot Framework,,,
LO-1.2.2,(K1),Recall what is part of Robot Framework and what is not,,,
LO-1.2.3,(K1),Recall the technology Robot Framework is built on and the prerequisites for running it,,,
LO-1.3,(K1),Recall the key attributes of the syntax that makes Robot Framework simple and human-readable,,,
LO-1.3.3,(K2),Explain the difference between User Keywords and Library Keywords,,,
LO-1.3.4,(K1),Recall the difference between Resource Files and Libraries and their artefacts,,,
LO-1.4,(K1),Recall the three specification styles of Robot Framework,,,
LO-1.4.1,(K2),Understand the basic concepts of Keyword-Driven Specification,,,
LO-1.4.2,(K2),Understand the basic concepts of Behavior-Driven Specification,,,
LO-1.4.3,(K1),Recall the differences between Keyword-Driven and Behavior-Driven Specification,,,
LO-1.4.4,(K1),Recall the purpose of Data-Driven Specification,,,
LO-1.5.1,(K1),Recall the type of open-source license under which Robot Framework is distributed,,,
LO-1.5.2,(K1),List and recall the key objectives and organizational form of the Robot Framework Foundation,,,
LO-1.5.3,(K1),Recall the official webpages for Robot Framework and its resources,,,
LO-2.1,(K2),Understand which files and directories are considered suites and how they are structured in a suite tree.,,,
LO-2.1.1,(K1),Recall the conditions and requirements for a file to be considered a Suite file,,,
LO-2.1.2,(K1),Recall the available sections in a suite file and their purpose.,,,
LO-2.1.2.1-1,(K1),Recall the available settings in a suite file.,,,
LO-2.1.2.1-2,(K2),Understand the concepts of suite settings and how to define them.,,,
LO-2.1.2.2,(K1),Recall the purpose of the `*** Variables ***` section.,,,
LO-2.1.2.3,(K2),Understand the purpose of the `*** Test Cases ***` or `*** Tasks ***` section.,,,
LO-2.1.2.4,(K2),Understand the purpose and limitations of the `*** Keywords ***` section.,,,
LO-2.2,(K2),Understand the basic syntax of test cases and tasks.,,,
LO-2.2.1,(K3),Understand and apply the mechanics of indentation and separation in Robot Framework.,,,
LO-2.2.2,(K3),Be able to use line breaks and continuation in a statement.,,,
LO-2.2.3,(K3),Be able to add in-line comments to suites.,,,
LO-2.2.4,(K2),Understand how to escape control characters in Robot Framework.,,,
LO-2.2.5,(K2),Understand the structure of a basic suite file.,,,
LO-2.3,(K1),Recall the three components of the Robot Framework CLI.,,,
LO-2.3.1,(K2),Understand how to run the `robot` command and its basic usage.,,,
LO-2.3.2,(K2),Explain the execution artifacts generated by Robot Framework.,,,
LO-2.3.3,(K1),Recall the four different status labels used by Robot Framework.,,,
LO-2.3.3.1,(K2),Understand when an element is marked as `PASS`.,,,
LO-2.3.3.2,(K2),Understand when an element is marked as `FAIL`.,,,
LO-2.3.4,(K2),Understand the difference between log messages and console output.,,,
LO-2.4.1-1,(K1),Recall the purpose of keyword libraries and how to import them.,,,
LO-2.4.1-2,(K1),Recall the three types of libraries in Robot Framework.,,,
LO-2.4.2-1,(K1),Recall the purpose of resource files.,,,
LO-2.4.2-2,(K3),Use resource files to import new keywords.,,,
LO-2.4.3,(K2),Understand the different types of paths that can be used to import libraries and resource files.,,,
LO-2.5,(K2),Understand the structure of keyword interfaces and how to interpret keyword documentation.,,,
LO-2.5.1,(K1),Recall the information that can be found in a keyword documentation.,,,
LO-2.5.2,(K2),Understand the difference between argument kinds.,,,
LO-2.5.2.1,(K2),Understand the concept of mandatory arguments and how they are documented.,,,
LO-2.5.2.2,(K2),Understand the concept of optional arguments and how they are documented.,,,
LO-2.5.2.3,(K1),Recall the concept of keywords with embedded arguments used in Behavior-Driven Specification and how they are documented.,,,
LO-2.5.2.4,(K1),"Recall how ""Positional or Named Arguments"" are marked in the documentation and their use case.",,,
LO-2.5.2.5,(K1),"Recall how ""Variable Number of Positional Arguments"" are marked in the documentation and their use case.",,,
LO-2.5.2.6,(K1),"Recall what properties ""Named-Only Arguments"" have and how they are documented.",,,
LO-2.5.2.7,(K1),Recall how free named arguments are marked in documentation.,,,
LO-2.5.2.8,(K2),Understand the concept of argument types and automatic type conversion.,,,
LO-2.5.2.9,(K2),Understand the concept of return type hints.,,,
LO-2.5.3,(K2),Understand how to read keyword documentation and how to interpret the examples.,,,
LO-2.6,(K2),Understand how to call imported keywords and how to structure keyword calls.,,,
LO-2.6.1,(K2),Understand the concept of how to set argument values positionally.,,,
LO-2.6.2,(K2),Understand the concept of named arguments and how to set argument values by their name.,,,
LO-2.6.3,(K1),Recall how to use embedded arguments.,,,
LO-3.2-1,(K2),Understand how variables in Robot Framework are used to store and manage data,,,
LO-3.2-2,(K1),Recall the relevant five different ways to create and assign variables,,,
LO-3.2.1-1,(K1),Recall the four syntactical access types to variables with their prefixes,,,
LO-3.2.1-2,(K1),Recall the basic syntax of variables,,,
LO-3.2.2-1,(K3),Create variables in the Variables section,,,
LO-3.2.2-2,(K3),Use the correct variable prefixes for assigning and accessing variables,,,
LO-3.2.2.1-1,(K3),Create and assign scalar variables,,,
LO-3.2.2.1-2,(K2),Understand how multiple lines can be used to define scalar variables,,,
LO-3.2.2.2,(K2),Understand how to access primitive data types,,,
LO-3.2.2.3,(K2),Understand how to set and access data in list variables,,,
LO-3.2.2.4,(K2),Understand how to set and access data in dict variables,,,
LO-3.2.3,(K3),Be able to assign return values from keywords to variables,,,
LO-3.2.4,(K2),Understand how to create variables using the VAR statement,,,
LO-3.2.5,(K2),Understand how `local` and `suite` scope variables are created,,,
LO-3.3.2,(K1),Recall the rules how keyword names are matched.,,,
LO-3.3.3,(K1),Recall all available settings and their purpose for User Keywords,,,
LO-3.3.4,(K1),Recall the significance of the first logical line and in keyword documentation for the log file.,,,
LO-3.3.5,(K2),Understand the purpose and syntax of the [Arguments] setting in User Keywords.,,,
LO-3.3.5.1-1,(K1),Recall what makes an argument mandatory in a user keyword.,,,
LO-3.3.5.1-2,(K3),Define User Keywords with mandatory arguments.,,,
LO-3.3.5.2-1,(K1),Recall how to define optional arguments in a user keyword.,,,
LO-3.3.5.2-2,(K3),Define User Keywords with optional arguments.,,,
LO-3.3.5.3-1,(K2),Describe how embedded arguments are replaced by actual values during keyword execution.,,,
LO-3.3.5.3-2,(K2),Understand the role of embedded arguments in Behavior-Driven Development (BDD) style.,,,
LO-3.3.6-1,(K2),Understand how the `RETURN` statement passes data between different keywords.,,,
LO-3.3.6-2,(K3),Use the `RETURN` statement to return values from a user keyword and assign it to a variable.,,,
LO-3.3.7,(K1),Recall the naming conventions for user keywords.,,,
LO-3.4,(K2),Understand the basic concept and syntax of Data-Driven Specification,,,
LO-3.4.1-1,(K2),Understand how to define and use test|task templates,,,
LO-3.4.1-2,(K1),Recall the differences between the two different approaches to define Data-Driven Specification,,,
LO-3.4.1.1,(K1),Recall the syntax and properties of multiple named test|task with one template,,,
LO-3.4.1.2,(K1),Recall the syntax and properties of named test|task with multiple data rows,,,
LO-3.5,(K1),Recall that naming conflicts can arise from the import of multiple resource files.,,,
LO-3.5.1,(K2),Understand how transitive imports of resource files and libraries work.,,,
LO-3.5.2,(K3),Be able to configure a library import using arguments.,,,
LO-3.5.3,(K2),Explain how naming conflicts can happen and how to mitigate them.,,,
LO-4.1-1,(K1),Recall the purpose and benefits of Setups in Robot Framework,,,
LO-4.1-2,(K1),Recall the different levels where a Setup can be defined,,,
LO-4.1.1-1,(K1),"Recall key characteristics, benefits, and syntax of Suite Setup",,,
LO-4.1.1-2,(K2),Understand when Suite Setup is executed and used,,,
LO-4.1.2-1,(K1),"Recall key characteristics, benefits, and syntax of Test Setup",,,
LO-4.1.2-2,(K2),Understand when Test|Task Setup is executed and used,,,
LO-4.1.3,(K1),Recall key characteristics and syntax of Keyword Setup,,,
LO-4.2-1,(K2),Understand the different levels where and how Teardowns can be defined and when they are executed,,,
LO-4.2-2,(K1),Recall the typical use cases for using Teardowns,,,
LO-4.2.1-1,(K1),"Recall key characteristics, benefits, and syntax of Suite Teardown",,,
LO-4.2.1-2,(K2),Understand when Suite Teardown is executed and used,,,
LO-4.2.2-1,(K1),"Recall key characteristics, benefits, and syntax of Test|Task Teardown",,,
LO-4.2.2-2,(K2),Understand when Test|Task Teardown is executed and used,,,
LO-4.2.3,(K1),"Recall key characteristics, benefits, and syntax of Keyword Teardown",,,
LO-4.3,(K1),Recall how to define an Initialization Files and its purpose,,,
LO-4.3.2,(K2),Understand the execution order of Suite Setup and Suite Teardown in Initialization Files and their sub-suites and tests|tasks,,,
LO-4.3.3,(K1),Recall the allowed sections and their content in Initialization Files,,,
LO-4.4,(K1),Recall the purpose of Test|Task Tags in Robot Framework,,,
LO-4.4.1,(K1),Recall the syntax and different ways to assign tags to tests|tasks,,,
LO-4.4.2,(K2),Understand how to filter tests|tasks using the command-line interface of Robot Framework,,,
LO-4.5-1,(K1),Recall the use case and purpose of skipping tests|tasks in Robot Framework,,,
LO-4.5-2,(K1),Recall the different ways to skip tests|tasks in Robot Framework,,,
LO-4.5.1,(K1),Recall the differences between skip and exclude,,,
LO-5.1.1,(K2),Understand the difference between statically defined and dynamically created variables in Robot Framework,,,
LO-5.1.1.1,(K1),Recall the priority of statically defined or imported variables in Robot Framework,,,
LO-5.1.1.2,(K1),Recall the priority of dynamically created variables in Robot Framework,,,
LO-5.1.2,(K1),Recall the different variable scopes in Robot Framework,,,
LO-5.1.2.1,(K1),Recall how to define global variables and where they can be accessed,,,
LO-5.1.2.2,(K1),Recall how to define suite variables and where they can be accessed,,,
LO-5.1.2.3,(K1),Recall how to define test|task variables and where they can be accessed,,,
LO-5.1.2.4,(K1),Recall how to define local variables and where they can be accessed,,,
LO-5.1.4.1,(K1),Recall that assignments to `@{list}` variables convert values to lists automatically,,,
LO-5.1.4.2,(K1),Recall that `@{list}` unpacks the values of a list variable when accessed,,,
LO-5.1.5.1,(K1),Recall that assignments to `&{dict}` variables automatically convert values to Robot Framework Dictionaries and enable dot-access,,,
LO-5.1.5.2,(K1),Recall that `&{dict}` unpacks to multiple key=value pairs when accessed,,,
LO-5.1.6,(K1),Recall that Robot Framework provides access to execution information via Built-In variables,,,
LO-5.2.1,(K2),Understand the purpose and basic concept of IF-Statements,,,
LO-5.2.4,(K2),Understand the purpose and basic concept of FOR Loops,,,
LO-5.2.5,(K2),Understand the purpose and basic concept of WHILE Loops,,,
LO-5.2.6,(K2),Understand the purpose and basic concept of the BREAK and CONTINUE statements,,,
